\documentclass[10pt,a4paper]{article}
\usepackage[margin=0.8 in]{geometry}
\usepackage[parfill]{parskip}
\usepackage{fancyhdr}
\usepackage{lastpage}
\usepackage{tikz}
\usepackage{multicol}
\usepackage{makecell}
\usepackage{mdframed}
\usepackage{dingbat}
\usepackage{booktabs}
\usepackage[table]{xcolor}
\setlength{\columnsep}{0cm}

\newenvironment{warning}
  {\par\begin{mdframed}[linewidth=2pt,linecolor=red]}%
  {\end{mdframed}\par}%
% endWarning

\def\checkmark{\tikz\fill[scale=0.4](0,.35) -- (.25,0) -- (1,.7) -- (.25,.15) -- cycle;} 

% font
\renewcommand{\familydefault}{\sfdefault}  % sans font
% redefine headers
\renewcommand{\thesection}{}
\renewcommand{\thesubsection}{\arabic{section}.\arabic{subsection}}
% redefine section headers and title page
\makeatletter
\renewcommand{\maketitle}{\bgroup\setlength{\parindent}{0pt}
\begin{flushleft}
  \textbf{\Large{\@title}}

  \@author
\end{flushleft}\egroup
}
\def\@seccntformat#1{\csname #1ignore\expandafter\endcsname\csname the#1\endcsname\quad}
\let\sectionignore\@gobbletwo
\let\latex@numberline\numberline
\def\numberline#1{\if\relax#1\relax\else\latex@numberline{#1}\fi}
\makeatother

% define title
\title{dMLPA Copy Number Analysis}
\author{South East Genomics Laboratory Hub}

% configure fancyheaders
\pagestyle{fancy}
\renewcommand{\sectionmark}[1]{\markright{#1}}
\fancyhf{}

% add version number to header
<<headnote, echo=FALSE, message=FALSE, results='asis' >>=
cat(paste(c("\\lhead{dMPLA-reporting ",sanitize(versionstr),"}"),collate="",sep=""))
@

\rhead{\rightmark}
\lfoot{\today}
\rfoot{Page \thepage\ of \pageref{LastPage}}

% DOCUMENT
\begin{document}
\maketitle
\textbf{Panel:} \Sexpr{sanitize(panel)} \\
\textbf{Genes:} \Sexpr{gene_list}
\\

<<functions, echo=FALSE, message=FALSE>>=
# returns Boolean if all QC measures are passed
qcPassed <- !any(
    metadata[which(metadata[,1] == "Reference probe quality"), samplename] != "Ok",
    metadata[which(metadata[,1] == "Quality checks"), samplename] != "Passed")

# prints QC warning banner
qcWarning<-function() {
  cat("\\\\")
  cat("\\begin{warning}\n")
  cat("\\begin{quote}\n")
  cat("\\textbf{One or more QC measures have exceeded set thresholds. Check QC report!}\n")
  cat("\\end{quote}\n")
  cat("\\end{warning}\n")
}

# plots the metadata (QC) table
qcTable<-function() {
  print(
    kbl(metadata, escape=T, booktabs=T) %>%
      kable_styling(latex_options = "hold_position", font_size=7) %>%
      row_spec(which(metadata[,samplename]%in%c("Fail")), bold = T, color = "white", background = "red") %>%
      row_spec(which(metadata[,samplename]%in%c("Passed", "Ok")), background = "green") %>%
      { if (qcPassed) footnote(., general=paste("All QC passed"), general_title="TITLE") else . }
  )
}

# prints the CNV summary table
cnvSummary<-function() {
  footnotes=c(
    "¹The Bayes Factor (BF) is a measure of strength of evidence of the alternate hypothesis (copy number change)",
    " over the null hypothesis (no alteration). CNVs with negative Bayes Factor were omitted.",
    " The following evidence levels were suggested by Lee and Wagenmakers (2013):",
    " 1 (no evidence), 1-3 (anecdotal), 3-10 (moderate), 10-30 (strong), 30-100 (very strong), over 100 (extreme).",
    "²Exon numbers refer to the flattened exon structure of all transcripts covered by the capture (meta-exons).",
    "³Confidence is LOW if reads ratio is between 0.75 and 1.25, or expected coverage below 50X.",
    "°minimum 10% CNV overlap.")
  cat("\\begin{scriptsize}")
  print(
    kbl(cna_summary, escape=FALSE, row.names=FALSE, format='latex', booktabs=TRUE) %>%
    row_spec(2:nrow(cna_summary)-1,hline_after=TRUE) %>%
    row_spec(0,bold=TRUE) %>%
    footnote(., general=paste(footnotes), general_title="")
  )
  cat("\\end{scriptsize}\n")
}

cnvProbes <- function(cnv) {
  cat("\\begin{scriptsize}")
  # TODO: print only selected columns (notes, probes, copy number change, expected copy number, ...?)
  print(
    kbl(cnv, escape=FALSE, row.names=FALSE, format='latex', booktabs=TRUE) %>%
    row_spec(2:nrow(cnv)-1,hline_after=TRUE) %>%
    row_spec(0,bold=TRUE)
  )
  cat("\\end{scriptsize}\n")
}

#### THIS NEEDS CHANGING/SIMPLIFYING ####
# plots the CNV copy number graphs
cnvPlot <- function(cnv, plot_title="", extend=1000) {
  # save plot environment
  .pardefault<-par(no.readonly=TRUE)
      
  # make a tibble and rename ratio column
  cnv <- rename(as_tibble(cnv), all_of(c("Ratio" = samplename)))
  
  # add approximate, dislocated position in bases (spread probes with same PosKb slightly)
  colocated_probe_offset<-1000/max(table(cnv$PosKb))
  adjusted_positions<-c(-1,diff(cnv$PosKb))==0
  offset_multiplier<-0
  PosEst<-vector()
  for (i in 1:length(cnv$PosKb)) {
    PosEst[i] <- 1000 * cnv$PosKb[i]
    if (adjusted_positions[i]) {
      offset_multiplier <- offset_multiplier + 1
      PosEst[i] <- PosEst[i] + (offset_multiplier * colocated_probe_offset)
    } else {
      offset_multiplier <- 0
    }
  }
  cnv<-cbind(cnv, PosEst)

  # get gene and plot limits (x-axis)
  gene <- unique(cnv$Gene)
  chrom <- unique(cnv$Chrom)
  start <- min(cnv$PosEst) - extend
  end <- max(cnv$PosEst) + extend

  #
  # setup plot layout
  #
  heights <- c(2, 1)
  xlim <- c(start, end)
  ylim <- c(0, 1.25 * max(cnv$Ratio))
  # setup plotting panels (stacked atio plot & gene structure)
  mat <- matrix(data = 1:2, nrow = 2, ncol = 1)
  layout(mat = mat, widths = rep(1, 2), heights = heights)

  #
  # Create read ratio plot
  #

  # formatting options
  fmt_bg <- '#0000FF80'
  fmt_fg <- 'blue'
  fmt_an <- c(135)
  fmt_de <- c(20)
      
  # adjust margin
  # par(mar = c(0, 4, 2, 2))
  par(mar = c(1, 4, 1, 2))

  # base plot
  plot(x = NA, y = NA, ylim = ylim, xlim = xlim, ylab = "ratio", xaxt = "n",
    main = plot_title)

  # determine and plot normal range band
  normal_ratio_range <- c(cnchange[['down']][2], cnchange[['up']][1])
  rect(start, normal_ratio_range[1], end, normal_ratio_range,
    col = fmt_bg, angle=fmt_an, density=fmt_de, border = NA)

  # reads ratios 
  ## TODO: visualise refernce probes?
  points(x = cnv$PosEst, y = cnv$Ratio, type = "b", pch = "+", col = fmt_fg)
        
  # add CNV overlay
  cnv_probes <- which(cnv$marked_cnv)
  cnvStart <- min(cnv[cnv_probes, "PosEst"])
  cnvEnd <- max(cnv[cnv_probes, "PosEst"])
  # mark in red for deletions, green for anythin else
  cnvcolour<-ifelse(mean(cnv[cnv_probes,"Ratio"] < 1), '#FF000044', '#00FF0044')
  rect(cnvStart, ylim[1], cnvEnd, ylim[2],
    col = cnvcolour, border=cnvcolour, lwd=5)

  # #### CONTINUE HERE ####
  # #### CONTINUE HERE ####
  # #### CONTINUE HERE ####
  # #### CONTINUE HERE ####

  # #
  # # plot gene data (take annotation from first result)
  # #
  # par(mar = c(2, 4, 0, 2))
  # plot(x = NA, y = NA, ylim = c(0, 1), xlim = xlim,
  #   yaxt = "n", ylab = "", xlab = "", xaxt = "n")
  
  # # axis ticks at bottom
  # my.pos <- axTicks(side = 1)
  # axis(side = 1, at = my.pos, labels = as.integer(my.pos))

      # # get exons within range of plot
      # selected <- which(anno[[1]]$chromosome == chrom & anno[[1]]$start >=
      #     xlim[1] & anno[[1]]$end <= xlim[2])
      # selected.2 <- max(min(selected) - 1, 1):min(max(selected) +
      #     1, nrow(anno[[1]]))
      # exon.array <- anno[[1]][selected.2, , drop = FALSE]
      # exon.array$short.name <- gsub(exon.array$name, pattern = "-.*", replacement = "")
      # if (nrow(exon.array) > 1) {
      #   if (exon.array$short.name[1] != exon.array$short.name[2]) {
      #     exon.array <- exon.array[-1, ]
      #   }
      #   if (nrow(exon.array) > 1 && (exon.array$short.name[nrow(exon.array)] !=
      #     exon.array$short.name[nrow(exon.array) - 1])) {
      #     exon.array <- exon.array[-nrow(exon.array),]
      #   }
      # }
      # exon.array$start.gene <- tapply(INDEX = exon.array$short.name,
      #     exon.array$start, FUN = min)[exon.array$short.name]
      # exon.array$middle <- 0.5 * (exon.array$start + exon.array$end)
      # # print exons
      # if (nrow(exon.array) >= 1) {
      #   pos <- 1
      #   lev <- 0.4
      #   arr <- by(exon.array, exon.array$start.gene, FUN = function(x) {
      #     my.x <- range(x$middle)
      #     lines(x = my.x, y = c(lev, lev))
      #     my.x <- mean(range(x$middle))
      #     if (my.x < xlim[1]) my.x <- xlim[1]
      #     if (my.x > xlim[2]) my.x <- xlim[2]
      #     # gene name
      #     text(x = my.x, y = ifelse(lev == 0.6, 0.7, 0.3),
      #       labels = x$short.name[1], pos = pos, cex = 0.5)
      #     # exon ticks
      #     for (i in 1:nrow(x)) {
      #       lines(x = c(x$middle[i], x$middle[i]), y = c(lev - 0.1, lev + 0.1))
      #     }
      #     if (pos == 1) {
      #       pos <<- 3
      #       lev <<- 0.6
      #     }
      #     else {
      #       pos <<- 1
      #       lev <<- 0.4
      #     }
      #   })
      # }
      # # add CNV overlay
      # cnvcolour<-ifelse(cnvType=="deletion", '#FF000044', '#00FF0044')
      # rect(chromStart, 0, chromEnd, 1, col = cnvcolour,
      #   border=cnvcolour, lwd=5)

  par(.pardefault) # restore plot environment
}

cnvDetails<-function() {
  for (c in 1:length(cna_detail)) {
    # print section header
    gene_symbol <- unique(cna_detail[[c]]$Gene)
    cat("\\subsubsection*{CNV\\_", c, " (", gene_symbol, ")}\n", sep="")

    # plot CNV
    cnvPlot(cna_detail[[c]], gene_symbol)

    # subset to CNV rows and relevant columns
    cnv_probes_sanitized <- cna_detail[[c]][which(cna_detail[[c]]$marked_cnv), c(2, 4, 5, 9, 11, 10)]
    # sanitize column names for LaTeX
    cnv_probes_colnames <- colnames(cnv_probes_sanitized)
    cnv_probes_colnames[which(cnv_probes_colnames == samplename)] <- "Change"
    colnames(cnv_probes_sanitized) <- sanitize(cnv_probes_colnames)

    # plot probe table with notes
    cnvProbes(cnv_probes_sanitized)
  }
}
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Build PDF document by calling above functions %%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<table, size='footnotesize', results='asis', echo=FALSE, message=FALSE, fig.width=9, fig.height=4, out.width='1.0\\linewidth' >>=
cat(paste0('\\section{',sanitize(samplename),'}'))
cat(paste0('\\textbf{Filename: }',sanitize(infile)))

# QC check and warning banner
if (!qcPassed) qcWarning()

# CNV summary table
cat("\\subsection*{Called CNVs}")
# print CNV summary table
if (!!nrow(cna_summary)) {
  cnvSummary()
} else {
  cat('\n\n\n')
  cat("\\textbf{NO CNVs CALLED IN REGION OF INTEREST.}\n")
}

# Print coverage plots and detail tables (for each CNV)
cat('\\newpage\n')
cat("\\subsection*{CNV Details}\n")
# cat("\\begin{multicols*}{2}\n")
cnvDetails()
# cat("\\end{multicols*}\n")


# Print QC stuff
cat('\\newpage\n')
cat("\\subsection*{Quality Control}\n")
qcTable()

save.image()
@

\end{document}
