\documentclass[10pt,a4paper]{article}
\usepackage[margin=0.8 in]{geometry}
\usepackage[parfill]{parskip}
\usepackage{fancyhdr}
\usepackage{lastpage}
\usepackage{tikz}
\usepackage{multicol}
\usepackage{makecell}
\usepackage{mdframed}
\usepackage{dingbat}
\usepackage{booktabs}
\usepackage[table]{xcolor}
\setlength{\columnsep}{0cm}

\newenvironment{warning}
  {\par\begin{mdframed}[linewidth=2pt,linecolor=red]}%
  {\end{mdframed}\par}%
% endWarning

\def\checkmark{\tikz\fill[scale=0.4](0,.35) -- (.25,0) -- (1,.7) -- (.25,.15) -- cycle;} 

% font
\renewcommand{\familydefault}{\sfdefault}  % sans font
% redefine headers
\renewcommand{\thesection}{}
\renewcommand{\thesubsection}{\arabic{section}.\arabic{subsection}}
% redefine section headers and title page
\makeatletter
\renewcommand{\maketitle}{\bgroup\setlength{\parindent}{0pt}
\begin{flushleft}
  \textbf{\Large{\@title}}

  \@author
\end{flushleft}\egroup
}
\def\@seccntformat#1{\csname #1ignore\expandafter\endcsname\csname the#1\endcsname\quad}
\let\sectionignore\@gobbletwo
\let\latex@numberline\numberline
\def\numberline#1{\if\relax#1\relax\else\latex@numberline{#1}\fi}
\makeatother

% define title
\title{dMLPA Copy Number Analysis}
\author{South East Genomics Laboratory Hub}

% configure fancyheaders
\pagestyle{fancy}
\renewcommand{\sectionmark}[1]{\markright{#1}}
\fancyhf{}

% add version number to header
<<headnote, echo=FALSE, message=FALSE, results='asis' >>=
cat(paste(c("\\lhead{dMPLA-reporting ",sanitize(versionstr),"}"),collate="",sep=""))
@

\rhead{\rightmark}
\lfoot{\today}
\rfoot{Page \thepage\ of \pageref{LastPage}}

% DOCUMENT
\begin{document}
\maketitle
\textbf{Panel:} \Sexpr{sanitize(panel)} \\
\textbf{Genes:} \Sexpr{gene_list}
\\

<<functions, echo=FALSE, message=FALSE>>=
# returns Boolean if all QC measures are passed
qcPassed <- !any(
    metadata[which(metadata[,1] == "Reference probe quality"), samplename] != "Ok",
    metadata[which(metadata[,1] == "Quality checks"), samplename] != "Passed")

# prints QC warning banner
qcWarning<-function() {
  cat("\\\\")
  cat("\\begin{warning}\n")
  cat("\\begin{quote}\n")
  cat("\\textbf{One or more QC measures have exceeded set thresholds. Check QC report!}\n")
  cat("\\end{quote}\n")
  cat("\\end{warning}\n")
}

# plots the metadata (QC) table
qcTable<-function() {
  print(
    kbl(metadata, escape=T, booktabs=T) %>%
      kable_styling(latex_options = "hold_position", font_size=7) %>%
      row_spec(which(metadata[,samplename]%in%c("Fail")), bold = T, color = "white", background = "red") %>%
      row_spec(which(metadata[,samplename]%in%c("Passed", "Ok")), background = "green") %>%
      { if (qcPassed) footnote(., general=paste("All QC passed"), general_title="TITLE") else . }
  )
}

# prints the CNV summary table
cnvSummary<-function() {
  footnotes=c(
    "Add notes here",
    " multiple lines if necessary")
  cat("\\begin{scriptsize}")
  print(
    kbl(cna_summary, escape=FALSE, row.names=FALSE, format='latex', booktabs=TRUE) %>%
    row_spec(2:nrow(cna_summary)-1,hline_after=TRUE) %>%
    row_spec(0,bold=TRUE) %>%
    footnote(., general=paste(footnotes), general_title="")
  )
  cat("\\end{scriptsize}\n")
}

cnvProbes <- function(cnv) {
  cat("\\begin{scriptsize}")
  print(
    kbl(cnv, escape=FALSE, row.names=FALSE, format='latex', booktabs=TRUE) %>%
    row_spec(2:nrow(cnv)-1,hline_after=TRUE) %>%
    row_spec(0,bold=TRUE)
  )
  cat("\\end{scriptsize}\n")
}

#### THIS NEEDS CHANGING/SIMPLIFYING ####
# plots the CNV copy number graphs
cnvPlot <- function(cnv, plot_title="", extend=1000) {
  # save plot environment
  .pardefault<-par(no.readonly=TRUE)
      
  # make a tibble and rename DQ column and Probe number column
  cnv <- rename(as_tibble(cnv), all_of(c("DQ" = samplename)))
  cnv <- rename(as_tibble(cnv), all_of(c("ProbeNumber" = "Probe number")))

  # get gene and plot limits (x-axis)
  gene <- unique(cnv$Gene)
  chrom <- unique(cnv$chrom)
  start <- min(cnv$pos_start) - extend
  end <- max(cnv$pos_end) + extend

  #
  # setup plot layout
  #
  heights <- c(2, 1)
  xlim <- c(start, end)
  ylim <- c(0, 1.25 * max(cnv$DQ))
  # setup plotting panels (stacked DQ plot & probe positions)
  mat <- matrix(data = 1:2, nrow = 2, ncol = 1)
  layout(mat = mat, widths = rep(1, 2), heights = heights)

  #
  # Create DQ values plot
  #

  # adjust margin
  par(mar = c(1, 4, 1, 2))

  # base plot
  plot(x = NA, y = NA, ylim = ylim, xlim = xlim, ylab = "DQ", xaxt = "n",
    main = plot_title)

  # add shadding for normal (green), het del (red) and het dup (blue)
  normal_DQ_range <- c(0.8, 1.2)
  rect(start, normal_DQ_range[1], end, normal_DQ_range,
    col = '#00FF0044', border = NA)
  het_del_DQ_range <- c(0.4, 0.6)
  rect(start, het_del_DQ_range[1], end, het_del_DQ_range,
    col = '#FF000044', border = NA)
  het_dup_DQ_range <- c(1.4, 1.6)
  rect(start, het_dup_DQ_range[1], end, het_dup_DQ_range,
    col = '#0000FF44', border = NA)

  # plot DQ values 
  points(x = cnv$pos_start, y = cnv$DQ, type = "b", pch = "+", col = 'black')
        
  # add CNV overlay
  cnv_probes <- which(cnv$marked_cnv)
  cnvStart <- min(cnv[cnv_probes, "pos_start"])
  cnvEnd <- max(cnv[cnv_probes, "pos_end"])
  # mark in shadded red for <0.8, blue for >1.2
  cnvcolour<-ifelse(mean(cnv[cnv_probes,"DQ"] < 1), '#FF000080', '#0000FF80')
  rect(cnvStart, ylim[1], cnvEnd, ylim[2],
    border=cnvcolour, lwd=3)

  #
  # plot probe data (take annotation from first result)
  #
  par(mar = c(2, 4, 0, 2))
  plot(x = NA, y = NA, ylim = c(0, 1), xlim = xlim,
    yaxt = "n", ylab = "n", xlab = "Coordinates GRCh38")
  
  # axis ticks at bottom
  my.pos <- axTicks(side = 1)
  axis(side = 1, at = my.pos, labels = as.integer(my.pos))

  probes <- tibble(name = character(), start = integer(), end = integer())
  for (x in unique(cnv$ProbeNumber)) {
    probeStart <- cnv[cnv$ProbeNumber ==x, "pos_start"]
    probeStart <- as.integer(probeStart)
    probeEnd <- cnv[cnv$ProbeNumber ==x, "pos_end"]
    probeEnd <- as.integer(probeEnd)
    probeName <- x
    probes <- probes %>% add_row(tibble_row(name = as.character(probeName), start = probeStart, end = probeEnd))
  }

  # plot probes
  if (nrow(probes) >= 1) {
    lev <- 0.4
    wig <- 0.1
    # # plot gene
    lines(x = c(min(cnv$pos_start), max(cnv$pos_end)), y = rep(lev + wig, 2))
    # # gene name
    text(x = cnv$pos_start, y = c(lev + (3 * wig), lev - wig), labels = cnv$Exon, pos = 4, cex = 0.5)
    # plot probes
    for (e in 1:nrow(probes)) {
      # probe ticks
      vertical_offset <- 2 * wig * (e %% 2)
      col = ifelse(e %% 2 == 0, 'black', 'red')
      rect(probes[e,"start"], lev - wig + vertical_offset, probes[e,"end"], lev + wig + vertical_offset,
        col = col, border = NA)
    }
  }

  par(.pardefault) # restore plot environment
}

cnvDetails<-function() {
  for (c in 1:length(cna_detail)) {
    # print section header
    gene_symbol <- unique(cna_detail[[c]]$Gene)
    cat("\\subsubsection*{CNV\\_", c, " (", gene_symbol, ")}\n", sep="")

    # plot CNV
    cnvPlot(cna_detail[[c]], gene_symbol)

    # subset to CNV rows and relevant columns 
    # 2 probe number, 12 chrom, 13 start, 14 end, 4 exon, 11 DQ, 10 probe notes
    cnv_probes_sanitized <- cna_detail[[c]][which(cna_detail[[c]]$marked_cnv), c(2, 12, 13, 14, 4, 11, 10)]
    # sanitize column names for LaTeX
    cnv_probes_colnames <- colnames(cnv_probes_sanitized)
    cnv_probes_colnames[which(cnv_probes_colnames == samplename)] <- "DQ"
    colnames(cnv_probes_sanitized) <- sanitize(cnv_probes_colnames)

    # plot probe table with notes
    cnvProbes(cnv_probes_sanitized)
  }
}
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Build PDF document by calling above functions %%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<table, size='footnotesize', results='asis', echo=FALSE, message=FALSE, fig.width=9, fig.height=4, out.width='1.0\\linewidth' >>=
cat(paste0('\\section{',sanitize(samplename),'}'))
cat(paste0('\\textbf{Filename: }',sanitize(infile)))

# Print QC info
cat("\\subsection*{Quality Control}\n")
# QC check and warning banner
if (!qcPassed) qcWarning()
qcTable()

# CNV summary table
cat("\\subsection*{Called CNVs}")
# print CNV summary table
if (!!nrow(cna_summary)) {
  cnvSummary()
} else {
  cat('\n\n\n')
  cat("\\textbf{NO CNVs CALLED IN REGION OF INTEREST.}\n")
}

# Print coverage plots and detail tables (for each CNV)
#cat('\\newpage\n')
cat("\\subsection*{CNV Details}\n")
# cat("\\begin{multicols*}{2}\n")
cnvDetails()
# cat("\\end{multicols*}\n")

save.image()
@

\end{document}
